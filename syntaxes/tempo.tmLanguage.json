{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Tempo",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#variableDeclaration"
		},
		{
			"include": "#funcDeclaration"
		},
		{
			"include": "#structDeclaration"
		},
		{
			"include": "#interfaceDeclaration"
		},
		{
			"include": "#expressions"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#structField"
		}
	],
	"repository": {
		"literals": {
			"patterns": [
				{
					"match": "\\b(true|false)\\b",
					"name": "constant.language.boolean.tempo"
				},
				{
					"match": "([0-9]+)(\\.)([0-9]*)|([0-9]*)(\\.)([0-9]+)",
					"captures": {
						"1": {
							"name": "constant.numeric.decimal.tempo"
						},
						"2": {
							"name": "constant.numeric..tempo"
						},
						"3": {
							"name": "constant.numeric.decimal.tempo"
						}
					}
				},
				{
					"match": "\\b([0-9]+)\\b",
					"name": "constant.numeric.decimal.tempo"
				},
				{
					"name": "string.quoted.double.tempo",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.tempo",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "(//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.tempo"
						}
					},
					"end": "[\\n\\r]",
					"name": "comment.line.double-slash.tempo"
				},
				{
					"begin": "(/\\*)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.tempo"
						}
					},
					"end": "(\\*/)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.comment.tempo"
						}
					},
					"name": "comment.block.tempo"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "\\b(async|await|if|else|while|return)\\b",
					"captures": {
						"1": {
							"name": "keyword.control.flow.$1.tempo"
						}
					}
				},
				{
					"match": "\\b(func)\\b",
					"name": "storage.type.func.tempo"
				},
				{
					"match": "\\b(let)\\b",
					"name": "storage.type.local.tempo"
				},
				{
					"match": "\\b(struct)\\b",
					"name": "storage.type.struct.tempo"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "(\\-\\>)",
					"name": "keyword.operator.communicate.tempo"
				},
				{
					"match": "(\\+|\\-|\\*|\\/|\\%)",
					"name": "keyword.operator.arithmetic.tempo"
				},
				{
					"match": "(\\&\\&|\\|\\|)",
					"name": "keyword.operator.logical.tempo"
				},
				{
					"match": "(\\=\\=|\\>|\\<|\\>\\=|\\<\\=)",
					"name": "keyword.operator.comparison.tempo"
				}
			]
		},
		"funcDeclaration": {
			"begin": "\\b(func)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.func.tempo"
				}
			},
			"end": "(\\{|\\;)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.block.begin.tempo"
				}
			},
			"name": "meta.function.signature.tempo",
			"patterns": [
				{
					"include": "#funcName"
				},
				{
					"include": "#roleList"
				},
				{
					"include": "#parameters"
				}
			]
		},
		"funcName": {
			"match": "([_a-zA-Z][_a-zA-Z0-9]*)(?=\\s*\\()",
			"name": "entity.name.function.tempo"
		},
		"parameters": {
			"patterns": [
				{
					"match": "([a-zA-Z][_a-zA-Z0-9]*)\\s*\\:([^\\,\\)]*)",
					"captures": {
						"1": {
							"name": "variable.parameter.tempo"
						},
						"2": {
							"patterns": [
								{
									"include": "#roleList"
								},
								{
									"include": "#typeDeclaration"
								}
							]
						}
					}
				}
			]
		},
		"roleList": {
			"patterns": [
				{
					"match": "(\\@)([_a-zA-Z0-9]+|[\\(\\[][_a-zA-Z0-9\\s,]+[\\)\\]])",
					"captures": {
						"1": {
							"name": "punctuation.definition.roles.tempo"
						},
						"2": {
							"patterns": [
								{
									"include": "#roleListWithoutAt"
								}
							]
						}
					}
				}
			]
		},
		"roleListWithoutAt": {
			"patterns": [
				{
					"match": "([a-zA-Z][_a-zA-Z0-9]*)",
					"captures": {
						"1": {
							"name": "storage.type.generic.role.tempo"
						}
					}
				},
				{
					"begin": "(\\()",
					"beginCaptures": {
						"1": {
							"name": "punctuation.bracket.round.tempo"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.bracket.round.tempo"
						}
					},
					"patterns": [
						{
							"match": "([a-zA-Z][_a-zA-Z0-9]*)",
							"name": "storage.type.generic.role.tempo"
						}
					]
				},
				{
					"begin": "(\\[)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.bracket.round.tempo"
						}
					},
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.bracket.round.tempo"
						}
					},
					"patterns": [
						{
							"match": "([a-zA-Z][_a-zA-Z0-9]*)",
							"name": "storage.type.generic.role.tempo"
						}
					]
				}
			]
		},
		"typeDeclaration": {
			"patterns": [
				{
					"match": "\\b(async)\\b",
					"captures": {
						"1": {
							"name": "storage.modifier.async.tempo"
						}
					}
				},
				{
					"match": "\\b(Int)\\b",
					"captures": {
						"1": {
							"name": "support.type.numeric.tempo"
						}
					}
				},
				{
					"match": "\\b(Bool)\\b",
					"captures": {
						"1": {
							"name": "support.type.boolean.tempo"
						}
					}
				},
				{
					"match": "\\b([a-zA-Z][_a-zA-Z0-9]*)\\b",
					"captures": {
						"1": {
							"name": "entity.name.type.tempo"
						}
					}
				}
			]
		},
		"variableDeclaration": {
			"begin": "\\b(let)\\s+([a-zA-Z][_a-zA-Z0-9]*)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.local.tempo"
				},
				"2": {
					"name": "variable.other.assignment.tempo"
				}
			},
			"end": "(\\=)",
			"endCaptures": {
				"1": {
					"name": "keyword.operator.assignment.tempo"
				}
			},
			"patterns": [
				{
					"include": "#roleList"
				},
				{
					"include": "#typeDeclaration"
				}
			]
		},
		"structDeclaration": {
			"begin": "\\b(struct)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.local.tempo"
				}
			},
			"end": "(\\{)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.begin.bracket.curly.tempo"
				}
			},
			"patterns": [
				{
					"include": "#roleList"
				},
				{
					"include": "#typeDeclaration"
				}
			]
		},
		"structField": {
			"patterns": [
				{
					"begin": "([a-zA-Z][_a-zA-Z0-9]*)\\s*\\:",
					"beginCaptures": {
						"1": {
							"name": "variable.other.property.tempo"
						}
					},
					"end": ";",
					"patterns": [
						{
							"include": "#typeDeclaration"
						}
					]
				}
			]
		},
		"interfaceDeclaration": {
			"begin": "\\b(interface)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.local.tempo"
				}
			},
			"end": "(\\})",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.end.bracket.curly.tempo"
				}
			},
			"patterns": [
				{
					"include": "#funcDeclaration"
				},
				{
					"match": "\\{",
					"name": "punctuation.definition.begin.bracket.curly.tempo"
				},
				{
					"include": "#roleList"
				},
				{
					"include": "#typeDeclaration"
				}
			]
		},
		"expressions": {
			"patterns": [
				{
					"include": "#literals"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#keywords"
				},
				{
					"match": "([_a-zA-Z0-9]+|[\\(\\[][_a-zA-Z0-9\\s,]+[\\)\\]])\\s*(\\-\\>)\\s*([_a-zA-Z0-9]+|[\\(\\[][_a-zA-Z0-9\\s,]+[\\)\\]])",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#roleListWithoutAt"
								}
							]
						},
						"2": {
							"name": "keyword.operator.communicate.tempo"
						},
						"3": {
							"patterns": [
								{
									"include": "#roleListWithoutAt"
								}
							]
						}
					}
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.curly.tempo"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.curly.tempo"
						}
					},
					"patterns": [
						{
							"match": "([a-zA-Z][_a-zA-Z0-9]*)\\s*\\:",
							"captures": {
								"1": {
									"name": "variable.other.property.tempo"
								}
							}
						},
						{
							"include": "#expressions"
						}
					]
				}
			]
		}
	},
	"scopeName": "source.tempo"
}